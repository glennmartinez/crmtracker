 
<%= nested_form_for [@project, @quote], :html => {:class =>'form-inline'} do |f| %>
<div>
  <%= f.hidden_field :project_id %>
  <%= f.label :name %>
  <%= f.text_field :name %>
  <%= f.label :status %>
  <%= f.text_field :status %>
</div>
<br><br>
  <p>
    <h4> Labour Items </h4>
  </p>
  <p>

    <%= f.fields_for :labouritems, :html => { :class => 'form-vertical' } do |builder| %>
 <div class="labouritems">
    <%= builder.label :description %>
    <%= builder.text_field :description, :class => "input-medium" %>
    <%= builder.label :hours %>
    <%= builder.text_field :hours, :class => "input-mini hours" %>
    <%= builder.label :total %>
    <%= builder.text_field :total,:readonly => true, :class => "input-small total" %>
    <%= builder.label "Mup/Hr" %>
    <%= builder.text_field :muphourrate, :class => "input-mini muphrate", :readonly => true %>
      <%= builder.label "Mup/Total" %>
    <%= builder.text_field :muptotal, :class => "input-small muptotal",:readonly => true %>
    <%= builder.label "Mup/%" %>
    <%= builder.text_field :muppercent, :class => "input-mini mupercent" %>
    <%= builder.label "Contractor" %>
    
    <%= builder.autocomplete_field :contractor_name, autocomplete_contractor_firstname_contractors_path, :update_elements => {:id => "##{form_tag_id(builder.object_name, :contractor_id)}" , :hourly_rate => "##{form_tag_id(builder.object_name, :contractor_rate)}"   },:class => "input-small",:placeholder => "Seach" %>
    <%= builder.hidden_field :contractor_id  %>
    <%= builder.label "Rate/hr"  %>
    <%= builder.text_field :contractor_rate,:class => "input-mini rate" %>
    <%= builder.label "Work %" %>
    <%= builder.text_field :progress_percent, :class => "input-mini progresspercent" %>
    <%= builder.label "Work $" %>
    <%= builder.text_field :progress_payment, :class => "input-small progresstotal" %>

    <%= builder.link_to_remove raw('<i class="icon-trash"></i>'),:class => 'btn btn-small btn-danger'   %>
</div> 
  <% end %>
 
  <%= f.link_to_add raw('<i class="icon-plus-sign"></i>'), :labouritems, :class => 'btn btn-small btn-primary' %>
</p>
<br>
 
      <h4> Material Items </h4>

<%= f.fields_for :materialitems do |maker| %>
  <div class="materialitems">
  
  <%= maker.label :name %>
  <%= maker.text_field :name, :class => "input-medium" %>
  <%= maker.label :quantity %>
  <%= maker.text_field :quantity, :class => "input-small maquantity" %>
  <%= maker.label :unitprice %>
  <%= maker.text_field :unitprice, :class => "input-small maunit" %>
  <%= maker.label :material_total %>
  <%= maker.text_field :material_total, :readonly => true, :class => "input-medium matotal" %>
  <%= maker.label :supplier_name %>
  <%= maker.autocomplete_field :supplier_name, autocomplete_supplier_name_suppliers_path, :update_elements => {:id => "##{form_tag_id(maker.object_name, :supplier_id)}" },:class => "input-medium",:placeholder => "Search" %>
  <%= maker.link_to_remove raw('<i class="icon-trash"></i>'),:class => 'btn btn-small btn-danger'%>

  <%= maker.hidden_field :supplier_id  %>
  </div>
<% end %>
  <%= f.link_to_add raw('<i class="icon-plus-sign"></i>'), :materialitems, :class => 'btn btn-small btn-primary' %>
  <br><br>  <br><br>
     <%= f.label "Labour Total:($)", :class=> 'strong' %> 
    <%= f.text_field :labourtotal, :class => "input-small" %>
     <%= f.label "Materials Total:($)", :class=> 'strong' %> 
    <%= f.text_field :materialtotal,:class => "input-small" %>
   <b><%= f.label "SubTotal:($)", :class=> 'strong' %></b> 
    <%= f.text_field :subtotal, :class => "input-small"  %>
  

 <br><br>
  <%= f.submit "Save Quote", :class => "btn btn-success" %>
 <% end %>

 <script type="text/javascript">

 var LabourItems = {
   rate: null,
   hours: null,
   total: null,
   mupercent: null,
   muptotal: null,
   muphrate: null,
   subtotal: null,
   progresspercent: null,
   progresstotal: null,
  
   init: function(object) {
      this.rate = parseInt($(object).children('.rate').first().val(), 10);
      // var rate = $(object).children('.rate').first();
      this.hours =parseInt($(object).children('.hours').first().val(), 10);
      this.mupercent =parseInt($(object).children('.mupercent').first().val(), 10);
      this.progresspercent = parseInt($(object).children('.progresspercent').first().val(), 10);
      if(isNaN(this.mupercent))
      {
        this.mupercent = 0;
      }

      this.total = this.rate * this.hours;
      this.muptotal = (this.mupercent / 100) * this.total;
      this.muphrate = this.muptotal / this.hours;
      this.subtotal = this.total + this.muptotal;
      this.updateTotal(object);
      this.markupTotal(object);
      this.markuphourRate(object);
      this.progresstotal = (this.progresspercent / 100) * this.subtotal;
      this.progressTotal(object);
   },
   updateTotal: function(object) {
      $(object).children('.total').first().val(this.subtotal || 0);
   },
   markupTotal: function(object) {
      $(object).children('.muptotal').first().val(this.muptotal || 0);
   },
   markuphourRate: function(object) {
      $(object).children('.muphrate').first().val(this.muphrate || 0);
   },
   progressTotal: function(object) {
      $(object).children('.progresstotal').first().val(this.progresstotal || 0);
   }
}

//reactTochange for those inputs that you want to observe
$('.labouritems input').live("keyup", function() {
   $('.labouritems').each( function(key,value){
      LabourItems.init(this);
   });
});



 var MaterialItems = {
   matotal: null,
   maquantity: null,
   maunit: null,
 
  
   init: function(object) {
      // var rate = $(object).children('.rate').first();
      this.maquantity =parseInt($(object).children('.maquantity').first().val(), 10);
      this.maunit =parseInt($(object).children('.maunit').first().val(), 10);

      this.matotal = this.maquantity * this.maunit;
     
      this.updateTotal(object);
   },
   updateTotal: function(object) {
      $(object).children('.matotal').first().val(this.matotal || 0);
   
   }
   
}

//reactTochange for those inputs that you want to observe
$('.materialitems input').live("keyup", function() {
   $('.materialitems').each( function(key,value){
      MaterialItems.init(this);
   });
});



 </script>
 
